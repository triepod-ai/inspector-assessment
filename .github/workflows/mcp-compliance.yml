name: MCP Compliance & Fuzz Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  MCP_PROTOCOL_VERSION: "2025-06-18"

jobs:
  mcp-compliance:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Start MCP server in background
        run: |
          npm run start-server &
          echo $! > server.pid
          # Wait for server to be ready
          timeout 30s bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 1; done' || true
          sleep 5  # Additional buffer
        env:
          NODE_ENV: test

      - name: Run MCP Compliance Tests
        run: |
          npm run test:mcp
        env:
          MCP_TOKEN: ${{ secrets.MCP_TOKEN || 'test-token' }}
          MCP_BAD_TOKEN: ${{ secrets.MCP_BAD_TOKEN || 'bad-token' }}
          MCP_URL: "http://localhost:3000"

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi
          # Cleanup any remaining processes
          pkill -f "node.*server" || true

  fuzz-testing:
    runs-on: ubuntu-latest
    needs: mcp-compliance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Start MCP server in background
        run: |
          npm run start-server &
          echo $! > server.pid
          timeout 30s bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 1; done' || true
          sleep 5
        env:
          NODE_ENV: test

      - name: Run Extended Fuzz Testing
        run: |
          npm run test:mcp -- --fuzz 1000
        env:
          MCP_TOKEN: ${{ secrets.MCP_TOKEN || 'test-token' }}
          MCP_BAD_TOKEN: ${{ secrets.MCP_BAD_TOKEN || 'bad-token' }}
          MCP_URL: "http://localhost:3000"

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid  
          fi
          pkill -f "node.*server" || true

  security-validation:
    runs-on: ubuntu-latest
    needs: mcp-compliance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Start MCP server in background
        run: |
          npm run start-server &
          echo $! > server.pid
          timeout 30s bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 1; done' || true
          sleep 5
        env:
          NODE_ENV: test

      - name: Run Security-Focused Tests
        run: |
          # Run with invalid tokens and protocol versions to test security
          npm run test:mcp -- --protocol "invalid-version" --token "" --badToken "malicious-token" --fuzz 100 || true
          npm run test:mcp -- --protocol "" --token "test-token" --badToken "" --fuzz 100 || true
        env:
          MCP_TOKEN: ""
          MCP_BAD_TOKEN: "malicious-payload"
          MCP_URL: "http://localhost:3000"

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi  
          pkill -f "node.*server" || true
